package com.fdm.model;

import javax.persistence.*;

import org.springframework.stereotype.Component;
/**
 * An extension of {@link Actor} specifically for human interaction
 * @author KILA
 * @version 1.0
 */
@Component
@Entity
public class PlayerCharacter extends Actor {

	/**
	 * Used for temporary holding when receiving input from the sockets
	 */
	public volatile char nextInput = '\u0000';
	
	/**
	 * Consumes input and sets the nextDirection
	 * @param input - input to use
	 */
	public void setInput(char input) {
		// if null character or blankspace
		if (input == '\u0000' || input == ' ') {
			return;
		}
		logger.trace("Player " + this.id + " inputted " + input);
		Direction inputDirection = processInput(input);
		if (inputDirection != Direction.NONE)
			nextDirection = inputDirection;
		return;
	}


	/**
	 * Convert a character input into a Direction
	 * @param input - the character to consume
	 * @return the direction generated by the input. NONE if the input was invalid
	 */
	public Direction processInput(char input) {
		// currently using wasd.
		switch (input) {
		case 'w':
			return Direction.UP;
		case 's':
			return Direction.DOWN;
		case 'a':
			return Direction.LEFT;
		case 'd':
			return Direction.RIGHT;
		}
		return Direction.NONE;
	}

	public PlayerCharacter() {
		super();
	}

	/**
	 * Constructor
	 * @param characterName
	 * @param x
	 * @param y
	 */
	public PlayerCharacter(String characterName, int x, int y) {

		super();
		this.characterName = characterName;
		this.x = x;
		this.y = y;
	}



	@Override
	public String toString() {
		return "PlayerCharacter [characterName=" + characterName + ", x=" + x + ", y=" + y + "]";
	}


	public String getCharacterName() {
		return characterName;
	}

	public void setCharacterName(String characterName) {
		this.characterName = characterName;
	}

	public Map getMap() {
		return map;
	}

	public void setMap(Map map) {
		this.map = map;
	}


}
